//AlbumImagesPair.java - class to hold a pair of images that typically are related (like dups)

package com.vendo.albumServlet;

//import org.apache.logging.log4j.*;


import java.util.Comparator;

public class AlbumImagesPair implements Comparator<AlbumImage>
{
	///////////////////////////////////////////////////////////////////////////
	public AlbumImagesPair(AlbumImage image1, AlbumImage image2)
	{
		if (compare (image1, image2) < 0) {
			_image1 = image1;
			_image2 = image2;
		} else {
			_image1 = image2;
			_image2 = image1;
		}
		//TODO - shouldn't make these calls in ctor
		_numberOfImagesInAlbum1 = AlbumImages.getNumMatchingImages (_image1.getBaseName (false), 0);
		_numberOfImagesInAlbum2 = AlbumImages.getNumMatchingImages (_image2.getBaseName (false), 0);
		int pixelDiff = image1.compareToByPixels (image2);
		incrementNumberOfDuplicateMatches (pixelDiff);
	}

	///////////////////////////////////////////////////////////////////////////
	public AlbumImage getImage1 ()
	{
		return _image1;
	}

	///////////////////////////////////////////////////////////////////////////
	public AlbumImage getImage2 ()
	{
		return _image2;
	}

	///////////////////////////////////////////////////////////////////////////
	public int getNumberOfImagesInAlbum1 ()
	{
		return _numberOfImagesInAlbum1;
	}

	///////////////////////////////////////////////////////////////////////////
	public int getNumberOfImagesInAlbum2 ()
	{
		return _numberOfImagesInAlbum2;
	}

	///////////////////////////////////////////////////////////////////////////
	public int getNumberOfDuplicateMatches ()
	{
		return _numberOfDuplicateMatches;
	}

	///////////////////////////////////////////////////////////////////////////
	public void incrementNumberOfDuplicateMatches (int pixelDiff)
	{
		++_numberOfDuplicateMatches;

		if (pixelDiff == 0) {
			++_numberOfImagesOfEqualSize;
		} else if (pixelDiff > 0) {
			++_numberOfImagesWhereFirstIsLarger;
		} else { // pixelDiff < 0
			++_numberOfImagesWhereSecondIsLarger;
		}
	}

	///////////////////////////////////////////////////////////////////////////
	@Override
	public int compare (AlbumImage image1, AlbumImage image2)
	{
		return image1.getName ().compareToIgnoreCase (image2.getName ());
	}

	///////////////////////////////////////////////////////////////////////////
    @Override
    public boolean equals (Object obj)
    {
		if (obj == this) {
			return true;
		}

		if (!(obj instanceof AlbumImagesPair)) {
			return false;
		}

		AlbumImagesPair other = (AlbumImagesPair) obj;
		return getJoinedNames ().equals (other.getJoinedNames ());
	}

	///////////////////////////////////////////////////////////////////////////
    @Override
    public int hashCode ()
    {
		return getJoinedNames ().hashCode ();
    }

	///////////////////////////////////////////////////////////////////////////
	//calculated on demand and cached
	protected synchronized String getJoinedNames ()
	{
		if (_joinedNames == null) {
			_joinedNames = getJoinedNames (getImage1 (), getImage2 ());
		}

		return _joinedNames;
	}

	///////////////////////////////////////////////////////////////////////////
	public static String getJoinedNames (AlbumImage image1, AlbumImage image2)
	{
		String baseName1 = image1.getBaseName (false);
		String baseName2 = image2.getBaseName (false);

		StringBuilder sb = new StringBuilder (48);
		if (baseName1.compareToIgnoreCase (baseName2) < 0) {
			sb.append (baseName1).append (".").append (baseName2);
		} else {
			sb.append (baseName2).append (".").append (baseName1);
		}

		return sb.toString ();
	}

	///////////////////////////////////////////////////////////////////////////
	public boolean pairRepresentsDuplicates ()
	{
//		if (getNumberOfImagesInAlbum1 () <= getNumberOfDuplicateMatches () || getNumberOfImagesInAlbum2 () <= getNumberOfDuplicateMatches ()) {
//			int bh = 1;
//		}

		return getNumberOfDuplicateMatches () > 0;

//		return ((getNumberOfDuplicateMatches () > 0)
//			 && (getNumberOfImagesInAlbum1 () <= getNumberOfDuplicateMatches () || getNumberOfImagesInAlbum2 () <= getNumberOfDuplicateMatches ()));

//		return getNumberOfImagesInAlbum1 () == getNumberOfDuplicateMatches () || getNumberOfImagesInAlbum2 () == getNumberOfDuplicateMatches ();
//		return getNumberOfImagesInAlbum1 () == getNumberOfDuplicateMatches () || getNumberOfImagesInAlbum2 () == getNumberOfDuplicateMatches ();
	}

	///////////////////////////////////////////////////////////////////////////
//	public boolean pairsRepresentExactDuplicates ()
	public boolean secondAlbumRepresentsExactDuplicate ()
	{
//		return (pairsRepresentDuplicates ()
//			&& (_numberOfImagesOfEqualSize + _numberOfImagesWhereFirstIsLarger >= getNumberOfDuplicateMatches()));

		return (getNumberOfImagesInAlbum2 () == getNumberOfDuplicateMatches ())
			&& (_numberOfImagesOfEqualSize + _numberOfImagesWhereFirstIsLarger == getNumberOfDuplicateMatches());

//		return getNumberOfImagesInAlbum1 () == getNumberOfDuplicateMatches () || getNumberOfImagesInAlbum2 () == getNumberOfDuplicateMatches ();
//		return getNumberOfImagesInAlbum1 () == getNumberOfDuplicateMatches () || getNumberOfImagesInAlbum2 () == getNumberOfDuplicateMatches ();
	}

	///////////////////////////////////////////////////////////////////////////
	@Override
	public String toString ()
	{
		String pixelDiffString;
		if (_numberOfImagesOfEqualSize == getNumberOfDuplicateMatches ()) {
			pixelDiffString = "=";

		} else if (_numberOfImagesWhereFirstIsLarger == getNumberOfDuplicateMatches ()) {
			pixelDiffString = ">";
		} else if ((_numberOfImagesWhereFirstIsLarger + _numberOfImagesOfEqualSize) == getNumberOfDuplicateMatches ()) {
			pixelDiffString = ">=";

		} else if (_numberOfImagesWhereSecondIsLarger == getNumberOfDuplicateMatches ()) {
			pixelDiffString = "<";

		} else if ((_numberOfImagesWhereSecondIsLarger + _numberOfImagesOfEqualSize) == getNumberOfDuplicateMatches ()) {
			pixelDiffString = "<=";

		} else {
			pixelDiffString = "?";
		}

		StringBuilder sb = new StringBuilder();
		sb.append (getImage1 ().getBaseName (false)).append (","); // no space
		sb.append (getImage2 ().getBaseName (false)).append (", ");
		sb.append (getNumberOfImagesInAlbum1 ()).append (", ");
		sb.append (getNumberOfImagesInAlbum2 ()).append (", ");
		sb.append (getNumberOfDuplicateMatches ()).append (" ");
		sb.append (pixelDiffString);

		return sb.toString ();
	}


	//members
	protected final AlbumImage _image1;
	protected final AlbumImage _image2;
	protected final int _numberOfImagesInAlbum1;
	protected final int _numberOfImagesInAlbum2;
	protected int _numberOfDuplicateMatches;
	protected int _numberOfImagesOfEqualSize;
	protected int _numberOfImagesWhereFirstIsLarger;
	protected int _numberOfImagesWhereSecondIsLarger;
	protected String _joinedNames = null;

//	protected static Logger _log = LogManager.getLogger ();
}
