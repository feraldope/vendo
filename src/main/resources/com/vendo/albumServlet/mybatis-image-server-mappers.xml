<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
mysql -u root -proot -e "show databases"
mysql -u root -proot albumimages -e "show tables"
mysql -u root -proot albumimages -e "describe images"

***Note: in this output, need to change each dash "-" to something else, like equals "=" to avoid issue with mybatis parser
+=============+======================+======+=====+===================+=============================+
| Field       | Type                 | Null | Key | Default           | Extra                       |
+=============+======================+======+=====+===================+=============================+
| name_id     | int(10) unsigned     | NO   | PRI | NULL              | auto_increment              |
| insert_date | timestamp            | NO   | PRI | CURRENT_TIMESTAMP | on update CURRENT_TIMESTAMP |
| sub_folder  | varchar(5)           | NO   | PRI | NULL              |                             |
| name_no_ext | varchar(40)          | NO   | PRI | NULL              |                             |
| bytes       | int(10) unsigned     | NO   |     | NULL              |                             |
| width       | smallint(5) unsigned | NO   |     | NULL              |                             |
| height      | smallint(5) unsigned | NO   |     | NULL              |                             |
| modified    | bigint(20) unsigned  | NO   |     | NULL              |                             |
| rgb_data    | char(40)             | NO   |     | NULL              |                             |
| exifDate0   | bigint(20) unsigned  | YES  |     | NULL              |                             |
| exifDate1   | bigint(20) unsigned  | YES  |     | NULL              |                             |
| exifDate2   | bigint(20) unsigned  | YES  |     | NULL              |                             |
| exifDate3   | bigint(20) unsigned  | YES  |     | NULL              |                             |
+=============+======================+======+=====+===================+=============================+
-->

<mapper namespace="com.vendo.albumServlet.AlbumImageMapper">

	<resultMap id="AlbumImageFileDetailsResultMap" type="com.vendo.albumServlet.AlbumImageFileDetails">
		<constructor>
			<arg column="name_no_ext" javaType="String" />
			<arg column="bytes" javaType="_long" />
			<arg column="modified" javaType="_long" />
		</constructor>
	</resultMap>

	<resultMap id="AlbumImageResultMap" type="com.vendo.albumServlet.AlbumImage">
		<constructor>
			<arg column="name_id" javaType="_integer" />
			<arg column="name_no_ext" javaType="String" />
			<arg column="sub_folder" javaType="String" />
			<arg column="bytes" javaType="_long" />
			<arg column="width" javaType="_integer" />
			<arg column="height" javaType="_integer" />
			<arg column="modified" javaType="_long" />
			<arg column="rgb_data" javaType="String" />
			<arg column="exifDate0" javaType="_long" />
			<arg column="exifDate1" javaType="_long" />
			<arg column="exifDate2" javaType="_long" />
			<arg column="exifDate3" javaType="_long" />
		</constructor>
	</resultMap>

	<resultMap id="AlbumImageCountResultMap" type="com.vendo.albumServlet.AlbumImageCount">
		<constructor>
			<arg column="base_name" javaType="String" />
			<arg column="image_count" javaType="integer" />
		</constructor>
	</resultMap>

	<resultMap id="AlbumImageDiffDetailsMap" type="com.vendo.albumServlet.AlbumImageDiffDetails">
		<constructor>
			<arg column="name_id_1" javaType="_integer" />
			<arg column="name_id_2" javaType="_integer" />
			<arg column="avg_diff" javaType="_integer" />
			<arg column="std_dev" javaType="_integer" />
			<arg column="count" javaType="_integer" />
			<arg column="source" javaType="String" />
			<arg column="last_update" javaType="java.sql.Timestamp" />
		</constructor>
	</resultMap>

	<resultMap id="AlbumImageDataResultMap" type="com.vendo.albumServlet.AlbumImageData">
		<constructor>
			<arg column="name_id" javaType="_integer" />
			<arg column="name_no_ext" javaType="String" />
			<arg column="width" javaType="_integer" />
			<arg column="height" javaType="_integer" />
		</constructor>
	</resultMap>


	<!-- each argument must be a column name from the database table definition -->
	<sql id="imagesReadColumns">name_id, name_no_ext, sub_folder, bytes, width, height, modified, rgb_data, exifDate0, exifDate1, exifDate2, exifDate3</sql>
	<sql id="imagesWriteColumns">name_no_ext, sub_folder, bytes, width, height, modified, rgb_data, exifDate0, exifDate1, exifDate2, exifDate3</sql>
	<!-- each argument must represent a "getter" value from the corresponding class -->
	<!--<sql id="imagesReadValues">#{nameId}, #{name}, #{subFolder}, #{numBytes}, #{width}, #{height}, #{modified}, #{rgbData}, #{exifDate0}, #{exifDate1}, #{exifDate2}, #{exifDate3}</sql>-->
	<sql id="imagesWriteValues">#{name}, #{subFolder}, #{numBytes}, #{width}, #{height}, #{modified}, #{rgbData}, #{exifDate0}, #{exifDate1}, #{exifDate2}, #{exifDate3}</sql>

	<!-- each argument must be a column name from the database table definition -->
	<sql id="imageCountsColumns">sub_folder, base_name, collapse_groups, image_count</sql>
	<!-- each argument must represent a "getter" value from the corresponding class -->
	<sql id="imageCountsValues">#{sub_folder}, #{base_name}, #{collapse_groups}, #{image_count}</sql>

	<!-- each argument must be a column name from the database table definition -->
	<sql id="imageDiffsColumns">name_id_1, name_id_2, avg_diff, std_dev, count, source, last_update</sql>
	<!-- each argument must represent a "getter" value from the corresponding class -->
	<sql id="imageDiffsValues">#{nameId1}, #{nameId2}, #{avgDiff}, #{stdDev}, #{count}, #{source}, #{lastUpdate}</sql>

	<select id="selectLastUpdateFromImageFolder" resultType="java.sql.Timestamp">
		select last_update
		from image_folder
		where sub_folder = #{sub_folder}
	</select>

	<select id="selectMaxLastUpdateFromImageFolder" resultType="java.sql.Timestamp">
		select max(last_update)
		from image_folder
	</select>

	<select id="selectMaxInsertDateFromImages" resultType="java.sql.Timestamp">
		select max(insert_date)
		from images
		where sub_folder = #{sub_folder}
	</select>

	<select id="selectImageFileDetailsFromImages" resultMap="AlbumImageFileDetailsResultMap">
		select name_no_ext, bytes, modified
		from images
		where sub_folder = #{sub_folder}
	</select>

	<select id="selectImagesFromImages" resultMap="AlbumImageResultMap">
		select
		<include refid="imagesReadColumns"/>
		from images
		where sub_folder = #{sub_folder}
	</select>

	<select id="selectImageCountFromImages" resultType="int">
		select count(name_id)
		from images
		where sub_folder = #{sub_folder}
		and name_no_ext rlike #{name_no_ext}
	</select>

	<select id="selectImageCountFromImageCounts" resultType="int">
		select image_count
		from image_counts
		where sub_folder = #{sub_folder}
		and base_name = #{base_name}
	</select>

<!-- obsolete - replaced by map in DAO
	<select id="selectAlbumCountFromImageCounts" resultType="int">
		select count(name_id)
		from image_counts
		where collapse_groups = 0
		and sub_folder = #{sub_folder}
		and base_name rlike #{base_name}
	</select>
-->

	<select id="selectImageCountsFromImageCounts" resultMap="AlbumImageCountResultMap">
		select base_name, image_count
		from image_counts
		where sub_folder = #{sub_folder}
	</select>

<!-- do not use: this does not work for variable-length subfolders; e.g., it does not distinguish between subfolders "ka" and "kat"
	<select id="selectMismatchedEntriesFromImageCounts" resultMap="AlbumImageCountResultMap">
		select t.base_name, t.image_count
		from (
			select base_name, image_count, sub_folder
			from image_counts
			 having lower(substring(base_name,1,LENGTH(sub_folder))) != sub_folder
		) as t
	</select>
-->

	<select id="selectAllImagesFromImageDiffs" resultMap="AlbumImageDiffDetailsMap">
		select
		<include refid="imageDiffsColumns"/>
		from image_diffs
	</select>

	<select id="selectImagesFromImageDiffs" resultMap="AlbumImageDiffDetailsMap">
		select
		<include refid="imageDiffsColumns"/>
		from image_diffs
		where name_id_1 in
		<foreach item="item" index="index" collection="nameIds" open="(" separator="," close=")">
			#{item}
		</foreach>
		or name_id_2 in
		<foreach item="item" index="index" collection="nameIds" open="(" separator="," close=")">
			#{item}
		</foreach>
	</select>

	<select id="selectNamesFromImages" resultMap="AlbumImageDataResultMap">
		select name_id, name_no_ext, width, height
		from images
		where name_no_ext in
		<foreach item="item" index="index" collection="names" open="(" separator="," close=")">
			#{item}
		</foreach>
	</select>

<!-- could not get this to work using rlike
	<select id="selectNamesFromImages" resultMap="AlbumImageDataResultMap">
		select name_id, name_no_ext
		from images
		where name_no_ext rlike
		<foreach item="item" index="index" collection="names" open="'" separator="|" close="'">
			#{item}
		</foreach>
	</select>
 -->

	<select id="selectMaxNameIdFromImages" resultType="int">
		select max(name_id)
		from images
	</select>

	<insert id="insertLastUpdateIntoImageFolder">
		insert into image_folder (sub_folder, last_update)
		values (#{sub_folder}, #{last_update})
		on duplicate key update
		last_update = values (last_update)
	</insert>

	<insert id="insertImageIntoImages">
		insert into images (
			<include refid="imagesWriteColumns"/>
		)
		values (
			<include refid="imagesWriteValues"/>
		)
	</insert>

	<insert id="insertImageCountsIntoImageCounts">
		insert into image_counts (
			<include refid="imageCountsColumns"/>
		)
		values (
			<include refid="imageCountsValues"/>
		)
		on duplicate key update
		image_count = values (image_count),
		sub_folder = values (sub_folder)
	</insert>

<!-- currently being implement by "AlbumImageDiffer.insertImageIntoImageDiffs to handle 'on duplicate key' case
	<insert id="insertImageIntoImageDiffs">
		insert into image_diffs (
			<include refid="imageDiffsColumns"/>
		)
		values (
			<include refid="imageDiffsValues"/>
		)
		on duplicate key update
		avg_diff = values (avg_diff),
		std_dev = values (std_dev),
		last_update = now()
	</insert>
-->

	<delete id="deleteImageFromImages">
		delete from images
		where sub_folder = #{sub_folder}
		and name_no_ext = #{name_no_ext}
	</delete>

	<delete id="deleteImageCountsFromImageCounts">
		delete from image_counts
		where sub_folder = #{sub_folder}
		and base_name = #{base_name}
	</delete>

	<delete id="deleteZeroCountsFromImageCounts">
		delete from image_counts
		where image_count = 0
	</delete>

	<delete id="deleteMismatchedEntriesFromImageCounts">
		delete image_counts.*
		from image_counts
		inner join (
			select name_id, base_name, sub_folder
			from image_counts
 			having lower(substring(base_name,1,LENGTH(sub_folder))) != sub_folder
		) as todelete on todelete.name_id = image_counts.name_id
	</delete>

</mapper>
